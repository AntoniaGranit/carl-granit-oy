name: Server Monitoring

on:
    schedule:
        # Run every 15 minutes
        - cron: "*/15 * * * *"
    workflow_dispatch:

env:
    APP_NAME: "carl-granit-oy"

jobs:
    monitor:
        runs-on: ubuntu-latest

        steps:
            - name: Check server status
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "=== Server Status Check ==="
                      echo "Date: $(date)"
                      echo ""

                      # Check disk space
                      echo "=== Disk Usage ==="
                      df -h
                      echo ""

                      # Check memory usage
                      echo "=== Memory Usage ==="
                      free -h
                      echo ""

                      # Check service status
                      echo "=== Service Status ==="
                      systemctl status ${{ env.APP_NAME }} --no-pager -l
                      echo ""

                      # Check nginx status
                      echo "=== Nginx Status ==="
                      systemctl status nginx --no-pager -l
                      echo ""

                      # Check application health
                      echo "=== Application Health ==="
                      if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                        echo "‚úÖ Application is healthy"
                      else
                        echo "‚ùå Application health check failed"
                        echo "Recent logs:"
                        journalctl -u ${{ env.APP_NAME }} --no-pager -l --since "10 minutes ago"
                      fi
                      echo ""

                      # Check SSL certificate status
                      echo "=== SSL Certificate Status ==="
                      if command -v certbot > /dev/null; then
                        certbot certificates 2>/dev/null || echo "No SSL certificates found"
                      else
                        echo "Certbot not installed"
                      fi
                      echo ""

                      # Check system load
                      echo "=== System Load ==="
                      uptime
                      echo ""

                      # Check recent errors
                      echo "=== Recent Errors (last 10 minutes) ==="
                      journalctl --since "10 minutes ago" --priority=err --no-pager -l | head -20 || echo "No recent errors"

            - name: Alert on critical issues
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      # Check for critical issues
                      CRITICAL_ISSUES=0

                      # Check if service is running
                      if ! systemctl is-active --quiet ${{ env.APP_NAME }}; then
                        echo "‚ùå CRITICAL: Application service is not running"
                        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                      fi

                      # Check if nginx is running
                      if ! systemctl is-active --quiet nginx; then
                        echo "‚ùå CRITICAL: Nginx is not running"
                        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                      fi

                      # Check disk space (alert if > 90%)
                      DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
                      if [ $DISK_USAGE -gt 90 ]; then
                        echo "‚ùå CRITICAL: Disk usage is ${DISK_USAGE}%"
                        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                      fi

                      # Check memory usage (alert if > 95%)
                      MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
                      if [ $MEMORY_USAGE -gt 95 ]; then
                        echo "‚ùå CRITICAL: Memory usage is ${MEMORY_USAGE}%"
                        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                      fi

                      # Check application health
                      if ! curl -f http://localhost:3000/health > /dev/null 2>&1; then
                        echo "‚ùå CRITICAL: Application health check failed"
                        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                      fi

                      if [ $CRITICAL_ISSUES -gt 0 ]; then
                        echo "üö® ALERT: $CRITICAL_ISSUES critical issues detected!"
                        exit 1
                      else
                        echo "‚úÖ All systems operational"
                      fi

            - name: Auto-restart on failure
              if: failure()
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "üîÑ Attempting to restart services..."

                      # Restart application service
                      systemctl restart ${{ env.APP_NAME }}
                      sleep 5

                      # Restart nginx if needed
                      if ! systemctl is-active --quiet nginx; then
                        systemctl restart nginx
                      fi

                      # Wait and check again
                      sleep 10

                      if systemctl is-active --quiet ${{ env.APP_NAME }} && curl -f http://localhost:3000/health > /dev/null 2>&1; then
                        echo "‚úÖ Services restarted successfully"
                      else
                        echo "‚ùå Services still not working after restart"
                        echo "Recent logs:"
                        journalctl -u ${{ env.APP_NAME }} --no-pager -l --since "5 minutes ago"
                      fi
