name: Deploy to Production Server

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

env:
    NODE_VERSION: "24.x"
    APP_NAME: "carl-granit-oy"
    APP_DIR: "/var/www/carl-granit-oy"

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"

            - name: Install dependencies
              run: |
                  corepack enable
                  pnpm install --frozen-lockfile

            - name: Build application
              run: |
                  export NEXT_TELEMETRY_DISABLED=1
                  pnpm run build

    deploy:
        needs: test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

        steps:
            - name: Validate required secrets
              run: |
                  if [ -z "${{ secrets.SERVER_IP }}" ]; then
                    echo "❌ SERVER_IP secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.SERVER_USER }}" ]; then
                    echo "❌ SERVER_USER secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
                    echo "❌ SERVER_SSH_KEY secret is not set"
                    exit 1
                  fi
                  echo "✅ All required secrets are present"

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"

            - name: Install dependencies
              run: |
                  corepack enable
                  pnpm install --frozen-lockfile

            - name: Build application
              run: |
                  export NEXT_TELEMETRY_DISABLED=1
                  pnpm run build

            - name: Create deployment package
              run: |
                  # Create deployment package with pre-built .next directory
                  echo "Creating deployment package..."

                  tar -czf deployment.tar.gz \
                    --exclude=node_modules \
                    --exclude=.git \
                    --exclude=.github \
                    --exclude=.next/cache \
                    --exclude=*.log \
                    --exclude=.DS_Store \
                    --exclude=.env.local \
                    --exclude=.env.*.local \
                    --exclude=terraform \
                    --exclude=terraform.tfstate \
                    app/ \
                    public/ \
                    .next/ \
                    package.json \
                    pnpm-lock.yaml \
                    Dockerfile \
                    docker-compose.yml \
                    next.config.ts \
                    tsconfig.json \
                    postcss.config.mjs \
                    next-env.d.ts \
                    README.md

                  echo "Deployment package created successfully"
                  ls -lh deployment.tar.gz

            - name: Deploy to server
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      # Create backup
                      if [ -d "${{ env.APP_DIR }}" ]; then
                        BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
                        mkdir -p /var/backups/${{ env.APP_NAME }}
                        cp -r ${{ env.APP_DIR }} /var/backups/${{ env.APP_NAME }}/$BACKUP_NAME
                        echo "Backup created: /var/backups/${{ env.APP_NAME }}/$BACKUP_NAME"
                      fi

                      # Stop Docker container
                      cd ${{ env.APP_DIR }} && docker compose down || docker stop ${{ env.APP_NAME }} || true

                      # Create app directory if it doesn't exist
                      mkdir -p ${{ env.APP_DIR }}

            - name: Upload deployment package
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  source: "deployment.tar.gz"
                  target: "/tmp/"

            - name: Extract and setup application
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      cd ${{ env.APP_DIR }}

                      # Extract new code
                      tar -xzf /tmp/deployment.tar.gz

                      # Clean up
                      rm /tmp/deployment.tar.gz

            - name: Start application with Docker
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      cd ${{ env.APP_DIR }}

                      # Stop existing container if running
                      docker compose down || docker stop ${{ env.APP_NAME }} || true
                      docker compose rm -f || true

                      # Build and start the container
                      docker compose up -d --build

                      # Wait for container to start
                      sleep 10

                      # Check container status
                      if docker ps | grep -q ${{ env.APP_NAME }} || docker compose ps | grep -q "Up"; then
                        echo "✅ Docker container started successfully!"
                        docker compose ps
                        docker compose logs --tail=50
                      else
                        echo "❌ Failed to start Docker container"
                        echo "=== Docker logs ==="
                        docker compose logs --tail=100 || docker logs ${{ env.APP_NAME }} || echo "No logs found"
                        exit 1
                      fi

            - name: Health check
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      # Wait for application to fully start
                      echo "Waiting for application to start..."
                      sleep 5

                      # Comprehensive health check with retries
                      MAX_RETRIES=6
                      RETRY_COUNT=0
                      HEALTH_CHECK_PASSED=false

                      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                        echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                        
                        # Check if container is running
                        if ! docker ps | grep -q ${{ env.APP_NAME }}; then
                          echo "❌ Container is not running"
                          docker compose ps
                          docker compose logs --tail=50
                          sleep 5
                          RETRY_COUNT=$((RETRY_COUNT + 1))
                          continue
                        fi

                        # Test HTTP endpoint
                        if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"; then
                          echo "✅ Application health check passed!"
                          HEALTH_CHECK_PASSED=true
                          break
                        else
                          echo "⚠️ Health check failed, retrying in 5 seconds..."
                          sleep 5
                          RETRY_COUNT=$((RETRY_COUNT + 1))
                        fi
                      done

                      if [ "$HEALTH_CHECK_PASSED" = false ]; then
                        echo "❌ Health check failed after $MAX_RETRIES attempts"
                        echo "=== Container Status ==="
                        docker compose ps
                        echo "=== Recent Logs ==="
                        docker compose logs --tail=100
                        exit 1
                      fi

            - name: Rollback on failure
              if: failure()
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "⚠️ Deployment failed, initiating rollback..."
                      
                      # Find the most recent backup
                      LATEST_BACKUP=$(ls -t /var/backups/${{ env.APP_NAME }} 2>/dev/null | head -n 1)
                      
                      if [ -z "$LATEST_BACKUP" ]; then
                        echo "⚠️ No backup found, cannot rollback"
                        echo "This might be the first deployment"
                        exit 0
                      fi
                      
                      echo "Rolling back to: $LATEST_BACKUP"
                      
                      # Stop current failed container
                      cd ${{ env.APP_DIR }}
                      docker compose down || true
                      
                      # Restore from backup
                      cd /var/backups/${{ env.APP_NAME }}/$LATEST_BACKUP
                      
                      # Start the backed up version
                      docker compose up -d || {
                        echo "❌ Rollback failed - backup may be corrupted"
                        exit 1
                      }
                      
                      # Wait and verify rollback
                      sleep 10
                      
                      if docker ps | grep -q ${{ env.APP_NAME }}; then
                        echo "✅ Rollback successful!"
                        echo "Application restored to previous version"
                      else
                        echo "❌ Rollback verification failed"
                        docker compose logs --tail=50
                      fi

            - name: Notify deployment success
              if: success()
              run: |
                  echo "🚀 Deployment successful!"
                  echo "Application is available at: http://${{ secrets.SERVER_IP }}:3000"

            - name: Notify deployment failure
              if: failure()
              run: |
                  echo "❌ Deployment failed!"
                  echo "Check the logs above for details"
                  echo "Automatic rollback was attempted"
